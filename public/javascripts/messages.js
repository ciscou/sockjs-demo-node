// Generated by CoffeeScript 1.8.0
(function() {
  var Message, MessageForm, MessageView, Messages, MessagesView, messages,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Message = (function(_super) {
    __extends(Message, _super);

    function Message() {
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.prototype.defaults = {
      body: ""
    };

    Message.prototype.sendToSockJs = function(sock) {
      return sock.send(this.get('body'));
    };

    return Message;

  })(Backbone.Model);

  Messages = (function(_super) {
    __extends(Messages, _super);

    function Messages() {
      return Messages.__super__.constructor.apply(this, arguments);
    }

    Messages.prototype.model = Message;

    return Messages;

  })(Backbone.Collection);

  MessageView = (function(_super) {
    __extends(MessageView, _super);

    function MessageView() {
      return MessageView.__super__.constructor.apply(this, arguments);
    }

    MessageView.prototype.tagName = 'li';

    MessageView.prototype.className = 'list-group-item';

    MessageView.prototype.template = Handlebars.templates['message.hbs'];

    MessageView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return MessageView;

  })(Backbone.View);

  MessagesView = (function(_super) {
    __extends(MessagesView, _super);

    function MessagesView() {
      return MessagesView.__super__.constructor.apply(this, arguments);
    }

    MessagesView.prototype.initialize = function() {
      return this.listenTo(this.collection, 'add', this.addMessage);
    };

    MessagesView.prototype.el = function() {
      return $('#messages');
    };

    MessagesView.prototype.addMessage = function(message) {
      this.$el.append(new MessageView({
        model: message
      }).render().el);
      return $("html, body").stop().animate({
        scrollTop: $(document).height() - $(window).height()
      }, 300, 'swing');
    };

    return MessagesView;

  })(Backbone.View);

  MessageForm = (function(_super) {
    __extends(MessageForm, _super);

    function MessageForm() {
      return MessageForm.__super__.constructor.apply(this, arguments);
    }

    MessageForm.prototype.initialize = function(attrs) {
      return this.sock = attrs.sock;
    };

    MessageForm.prototype.events = {
      "submit": "onSubmit"
    };

    MessageForm.prototype.el = function() {
      return $("#new-message");
    };

    MessageForm.prototype.onSubmit = function(e) {
      var $input;
      e.preventDefault();
      $input = this.$("input#message-body");
      new Message({
        body: $input.val()
      }).sendToSockJs(this.sock);
      e.currentTarget.reset();
      return $input.focus();
    };

    return MessageForm;

  })(Backbone.View);

  messages = new Messages;

  $(function() {
    var connect, wait;
    new MessagesView({
      collection: messages
    });
    wait = 1;
    connect = function() {
      var sock;
      messages.push({
        body: "connecting..."
      });
      sock = new SockJS("/broadcast");
      sock.onopen = function(e) {
        wait = 1;
        return messages.push({
          body: "...connected"
        });
      };
      sock.onmessage = function(e) {
        return messages.push({
          body: e.data
        });
      };
      sock.onclose = function(e) {
        messages.push({
          body: "disconnected"
        });
        messages.push({
          body: "trying to reconnect in " + wait + " seconds"
        });
        setTimeout(connect, wait * 1000);
        return wait *= 2;
      };
      return new MessageForm({
        sock: sock
      });
    };
    return connect();
  });

}).call(this);
